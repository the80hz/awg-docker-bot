import db
import aiohttp
import logging
import asyncio
import aiofiles
import os
import re
import tempfile
import json
import subprocess
import sys
import pytz
import zipfile
import ipaddress
import humanize
import shutil
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import exceptions as aiogram_exceptions
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
from zoneinfo import ZoneInfo

CURRENT_TIMEZONE = ZoneInfo('Europe/Moscow')

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


config = db.get_config()
bot_token = config.get('bot_token')
admin_id = config.get('admin_id')

if not all([bot_token, admin_id]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (bot_token –∏–ª–∏ admin_id).")
    sys.exit(1)

servers = db.load_servers()
if not servers:
    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

bot = Bot(bot_token)
try:
    admin = int(admin_id)
except Exception:
    logger.error("admin_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ id —á–∞—Ç–∞)")
    sys.exit(1)

# –ï—Å–ª–∏ admin_id < 0 ‚Äî —ç—Ç–æ id —á–∞—Ç–∞, –µ—Å–ª–∏ > 0 ‚Äî id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_admin(message_or_callback: types.Message | types.CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏—à–ª–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞).
    """
    # –î–ª—è callback_query –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —á–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message_or_callback, types.CallbackQuery):
        chat_id = message_or_callback.message.chat.id
        user_id = message_or_callback.from_user.id
    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —á–∞—Ç
    else:
        chat_id = message_or_callback.chat.id
        user_id = message_or_callback.from_user.id

    # –ï—Å–ª–∏ admin - —ç—Ç–æ ID —á–∞—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
    if admin < 0:
        return chat_id == admin
    # –ï—Å–ª–∏ admin - —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
    else:
        return user_id == admin

current_server = None
WG_CONFIG_FILE = None
DOCKER_CONTAINER = None
ENDPOINT = None

def update_server_settings(server_id=None):
    global current_server, WG_CONFIG_FILE, DOCKER_CONTAINER, ENDPOINT
    if server_id:
        servers = db.load_servers()
        if server_id in servers:
            server_config = servers[server_id]
            WG_CONFIG_FILE = server_config.get('wg_config_file')
            DOCKER_CONTAINER = server_config.get('docker_container')
            ENDPOINT = server_config.get('endpoint')
            current_server = server_id
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        else:
            logger.error(f"–°–µ—Ä–≤–µ—Ä {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    else:
        WG_CONFIG_FILE = None
        DOCKER_CONTAINER = None
        ENDPOINT = None
        current_server = None
        return True

class AdminMessageDeletionMiddleware(BaseMiddleware):
    async def on_process_message(self, message: types.Message, data: dict):
        if is_admin(message):
            asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=2))

dp = Dispatcher(bot)
scheduler = AsyncIOScheduler(timezone=pytz.UTC)
scheduler.start()

dp.middleware.setup(AdminMessageDeletionMiddleware())

main_menu_markup = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
    InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="list_users"),
    InlineKeyboardButton("üîë –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø", callback_data="create_backup"),
    InlineKeyboardButton("‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="manage_servers")
)

user_main_menu_markup = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="add_user"),
    InlineKeyboardButton("üìã –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="list_users")
)

current_server = None

user_main_messages = {}
isp_cache = {}
ISP_CACHE_FILE = 'files/isp_cache.json'
CACHE_TTL = timedelta(hours=24)

def get_interface_name():
    return os.path.basename(WG_CONFIG_FILE).split('.')[0]

async def load_isp_cache():
    global isp_cache
    if os.path.exists(ISP_CACHE_FILE):
        async with aiofiles.open(ISP_CACHE_FILE, 'r') as f:
            try:
                isp_cache = json.loads(await f.read())
                for ip in list(isp_cache.keys()):
                    isp_cache[ip]['timestamp'] = datetime.fromisoformat(isp_cache[ip]['timestamp'])
            except:
                isp_cache = {}

async def save_isp_cache():
    async with aiofiles.open(ISP_CACHE_FILE, 'w') as f:
        cache_to_save = {ip: {'isp': data['isp'], 'timestamp': data['timestamp'].isoformat()} for ip, data in isp_cache.items()}
        await f.write(json.dumps(cache_to_save))

async def get_isp_info(ip: str) -> str:
    now = datetime.now(pytz.UTC)
    if ip in isp_cache:
        if now - isp_cache[ip]['timestamp'] < CACHE_TTL:
            return isp_cache[ip]['isp']
    try:
        ip_obj = ipaddress.ip_address(ip)
        if ip_obj.is_private:
            return "Private Range"
    except:
        return "Invalid IP"
    url = f"http://ip-api.com/json/{ip}?fields=status,message,isp"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data.get('status') == 'success':
                        isp = data.get('isp', 'Unknown ISP')
                        isp_cache[ip] = {'isp': isp, 'timestamp': now}
                        await save_isp_cache()
                        return isp
    except:
        pass
    return "Unknown ISP"

async def cleanup_isp_cache():
    now = datetime.now(pytz.UTC)
    for ip in list(isp_cache.keys()):
        if now - isp_cache[ip]['timestamp'] >= CACHE_TTL:
            del isp_cache[ip]
    await save_isp_cache()

async def cleanup_connection_data(username: str):
    file_path = os.path.join('files', 'connections', f'{username}_ip.json')
    if os.path.exists(file_path):
        async with aiofiles.open(file_path, 'r') as f:
            try:
                data = json.loads(await f.read())
            except:
                data = {}
        sorted_ips = sorted(data.items(), key=lambda x: datetime.strptime(x[1], '%d.%m.%Y %H:%M'), reverse=True)
        limited_ips = dict(sorted_ips[:100])
        async with aiofiles.open(file_path, 'w') as f:
            await f.write(json.dumps(limited_ips))

async def load_isp_cache_task():
    await load_isp_cache()
    scheduler.add_job(cleanup_isp_cache, 'interval', hours=1)

def create_zip(backup_filepath):
    with zipfile.ZipFile(backup_filepath, 'w') as zipf:
        for main_file in ['awg/awg-decode.py', 'awg/newclient.sh', 'awg/removeclient.sh']:
            if os.path.exists(main_file):
                zipf.write(main_file, main_file)
        for root, dirs, files in os.walk('files'):
            for file in files:
                filepath = os.path.join(root, file)
                arcname = os.path.relpath(filepath, os.getcwd())
                zipf.write(filepath, arcname)
        for root, dirs, files in os.walk('users'):
            for file in files:
                filepath = os.path.join(root, file)
                arcname = os.path.relpath(filepath, os.getcwd())
                zipf.write(filepath, arcname)

async def delete_message_after_delay(chat_id: int, message_id: int, delay: int):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except:
        pass

def parse_relative_time(relative_str: str) -> datetime:
    try:
        parts = relative_str.lower().replace(' ago', '').split(', ')
        delta = timedelta()
        for part in parts:
            number, unit = part.split(' ')
            number = int(number)
            if 'minute' in unit:
                delta += timedelta(minutes=number)
            elif 'second' in unit:
                delta += timedelta(seconds=number)
            elif 'hour' in unit:
                delta += timedelta(hours=number)
            elif 'day' in unit:
                delta += timedelta(days=number)
            elif 'week' in unit:
                delta += timedelta(weeks=number)
            elif 'month' in unit:
                delta += timedelta(days=30 * number)
            elif 'year' in unit:
                delta += timedelta(days=365 * number)
        return datetime.now(pytz.UTC) - delta
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ '{relative_str}': {e}")
        return None

@dp.message_handler(commands=['start', 'help'])
async def help_command_handler(message: types.Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º is_admin –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    if is_admin(message):
        # –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
        menu = main_menu_markup
        text = f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: *{current_server}*"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        sent_message = await message.answer(text, reply_markup=menu, parse_mode='MarkDown')
        user_main_messages[admin] = {'chat_id': sent_message.chat.id, 'message_id': sent_message.message_id}
        try:
            await bot.pin_chat_message(chat_id=message.chat.id, message_id=sent_message.message_id, disable_notification=True)
        except:
            pass
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
        menu = user_main_menu_markup
        text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π: *{current_server}*"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        sent_message = await message.answer(text, reply_markup=menu, parse_mode='MarkDown')
        user_main_messages[message.from_user.id] = {'chat_id': sent_message.chat.id, 'message_id': sent_message.message_id}

@dp.message_handler()
async def handle_messages(message: types.Message):
    if message.chat.id != admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    user_state = user_main_messages.get(admin, {}).get('state')
    
    if user_state == 'waiting_for_server_id':
        server_id = message.text.strip()
        if not all(c.isalnum() or c in "-_" for c in server_id):
            main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
            main_message_id = user_main_messages.get(admin, {}).get('message_id')
            if main_chat_id and main_message_id:
                await bot.edit_message_text(
                    chat_id=main_chat_id,
                    message_id=main_message_id,
                    text="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.\n–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="manage_servers")
                    )
                )
            asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=5))
            return
        
        user_main_messages[admin]['server_id'] = server_id
        user_main_messages[admin]['state'] = 'waiting_for_server_host'
        
        main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
        main_message_id = user_main_messages.get(admin, {}).get('message_id')
        if main_chat_id and main_message_id:
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text="–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="manage_servers")
                )
            )
        asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=5))
        
    elif user_state == 'waiting_for_server_host':
        host = message.text.strip()
        user_main_messages[admin]['host'] = host
        user_main_messages[admin]['state'] = 'waiting_for_server_port'
        
        main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
        main_message_id = user_main_messages.get(admin, {}).get('message_id')
        if main_chat_id and main_message_id:
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text="–í–≤–µ–¥–∏—Ç–µ SSH –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22):",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="manage_servers")
                )
            )
        asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=5))
        
    elif user_state == 'waiting_for_server_port':
        try:
            port = int(message.text.strip() or "22")
            user_main_messages[admin]['port'] = port
            user_main_messages[admin]['state'] = 'waiting_for_server_username'
            
            main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
            main_message_id = user_main_messages.get(admin, {}).get('message_id')
            if main_chat_id and main_message_id:
                await bot.edit_message_text(
                    chat_id=main_chat_id,
                    message_id=main_message_id,
                    text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SSH:",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="manage_servers")
                    )
                )
            asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=5))
        except ValueError:
            main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
            main_message_id = user_main_messages.get(admin, {}).get('message_id')
            if main_chat_id and main_message_id:
                await bot.edit_message_text(
                    chat_id=main_chat_id,
                    message_id=main_message_id,
                    text="–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n–í–≤–µ–¥–∏—Ç–µ SSH –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22):",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="manage_servers")
                    )
                )
            asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=5))
            
    elif user_state == 'waiting_for_server_username':
        username = message.text.strip()
        user_main_messages[admin]['username'] = username
        user_main_messages[admin]['state'] = 'waiting_for_auth_type'
        
        auth_markup = InlineKeyboardMarkup(row_width=2)
        auth_markup.add(
            InlineKeyboardButton("–ü–∞—Ä–æ–ª—å", callback_data="auth_password"),
            InlineKeyboardButton("SSH –∫–ª—é—á", callback_data="auth_key")
        )
        
        main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
        main_message_id = user_main_messages.get(admin, {}).get('message_id')
        if main_chat_id and main_message_id:
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
                reply_markup=auth_markup
            )
        asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=5))
        
    elif user_state == 'waiting_for_password':
        password = message.text.strip()
        server_data = user_main_messages[admin]
        
        success = db.add_server(
            server_data['server_id'],
            server_data['host'],
            server_data['port'],
            server_data['username'],
            'password',
            password=password
        )
        
        main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
        main_message_id = user_main_messages.get(admin, {}).get('message_id')
        
        if success:
            if main_chat_id and main_message_id:
                await bot.edit_message_text(
                    chat_id=main_chat_id,
                    message_id=main_message_id,
                    text="–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                    reply_markup=main_menu_markup
                )
            await asyncio.sleep(2)
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:",
                reply_markup=InlineKeyboardMarkup(row_width=2).add(
                    *[InlineKeyboardButton(
                        f"{'‚úÖ ' if server == current_server else ''}{server}",
                        callback_data=f"select_server_{server}"
                    ) for server in db.get_server_list()],
                    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="add_server"),
                    InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="delete_server"),
                    InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home")
                )
            )
        else:
            if main_chat_id and main_message_id:
                await bot.edit_message_text(
                    chat_id=main_chat_id,
                    message_id=main_message_id,
                    text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_servers")
                    )
                )
        
        asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=5))
            
    elif user_state == 'waiting_for_key_path':
        key_path = message.text.strip()
        server_data = user_main_messages[admin]
        
        success = db.add_server(
            server_data['server_id'],
            server_data['host'],
            server_data['port'],
            server_data['username'],
            'key',
            key_path=key_path
        )
        
        main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
        main_message_id = user_main_messages.get(admin, {}).get('message_id')
        
        if success:
            if main_chat_id and main_message_id:
                await bot.edit_message_text(
                    chat_id=main_chat_id,
                    message_id=main_message_id,
                    text="–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                    reply_markup=main_menu_markup
                )
            await asyncio.sleep(2)
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:",
                reply_markup=InlineKeyboardMarkup(row_width=2).add(
                    *[InlineKeyboardButton(
                        f"{'‚úÖ ' if server == current_server else ''}{server}",
                        callback_data=f"select_server_{server}"
                    ) for server in db.get_server_list()],
                    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="add_server"),
                    InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="delete_server"),
                    InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home")
                )
            )
        else:
            if main_chat_id and main_message_id:
                await bot.edit_message_text(
                    chat_id=main_chat_id,
                    message_id=main_message_id,
                    text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_servers")
                    )
                )
        
        asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id, delay=5))
            
    else:
        sent_message = await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.")
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id, delay=5))

@dp.callback_query_handler(lambda c: c.data.startswith('add_user'))
async def add_user_start(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    if not current_server:
        await callback_query.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä: username_1687888999
    client_name = f"{callback_query.from_user.username or user_id}_{int(datetime.now().timestamp())}"
    
    # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–∞—Ñ–∏–∫–∞
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è
    db.set_user_expiration(client_name, None, "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ", owner_id=callback_query.from_user.id, server_id=current_server)
    
    confirmation_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{client_name}** –¥–æ–±–∞–≤–ª–µ–Ω."
    
    success = db.root_add(client_name, server_id=current_server, ipv6=False)
    if success:
        try:
            conf_path = os.path.join('users', client_name, f'{client_name}.conf')
            vpn_key = ""
            if os.path.exists(conf_path):
                vpn_key = await generate_vpn_key(conf_path)
            if vpn_key:
                instruction_text = (
                    "\nAmneziaVPN [Google Play](https://play.google.com/store/apps/details?id=org.amnezia.vpn&hl=ru), "
                    "[GitHub](https://github.com/amnezia-vpn/amnezia-client)"
                )
                formatted_key = format_vpn_key(vpn_key)
                key_message = f"```\n{formatted_key}\n```"
                caption = f"{instruction_text}\n{key_message}"
            else:
                caption = "VPN –∫–ª—é—á –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."
            if os.path.exists(conf_path):
                with open(conf_path, 'rb') as config:
                    sent_doc = await bot.send_document(
                        user_id,
                        config,
                        caption=caption,
                        parse_mode="Markdown"
                    )
                    asyncio.create_task(delete_message_after_delay(user_id, sent_doc.message_id, delay=300))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            confirmation_text += f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
    else:
        confirmation_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{client_name}**."

    main_message = user_main_messages.get(user_id)
    if main_message:
        await bot.edit_message_text(
            chat_id=main_message['chat_id'],
            message_id=main_message['message_id'],
            text=confirmation_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home")
            )
        )
    await callback_query.answer()

def parse_traffic_limit(traffic_limit: str) -> int:
    mapping = {'B':1, 'KB':10**3, 'MB':10**6, 'GB':10**9, 'TB':10**12}
    match = re.match(r'^(\d+(?:\.\d+)?)\s*(B|KB|MB|GB|TB)$', traffic_limit, re.IGNORECASE)
    if match:
        value = float(match.group(1))
        unit = match.group(2).upper()
        return int(value * mapping.get(unit, 1))
    else:
        return None

def format_vpn_key(vpn_key, num_lines=8):
    line_length = len(vpn_key) // num_lines
    if len(vpn_key) % num_lines != 0:
        line_length += 1
    lines = [vpn_key[i:i+line_length] for i in range(0, len(vpn_key), line_length)]
    formatted_key = '\n'.join(lines)
    return formatted_key

@dp.callback_query_handler(lambda c: c.data.startswith('client_'))
async def client_selected_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
        
    if not current_server:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏'", show_alert=True)
        return
        
    _, username = callback_query.data.split('client_', 1)
    username = username.strip()
    clients = db.get_client_list(server_id=current_server)
    client_info = next((c for c in clients if c[0] == username), None)
    if not client_info:
        await callback_query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    if not is_admin(callback_query):
        expirations = db.load_expirations()
        owner_id = expirations.get(username, {}).get(current_server, {}).get('owner_id')
        if owner_id != callback_query.from_user.id:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", show_alert=True)
            return

    expiration_time = db.get_user_expiration(username, server_id=current_server)
    traffic_limit = db.get_user_traffic_limit(username, server_id=current_server)
    status = "üî¥ Offline"
    incoming_traffic = "‚Üì‚Äî"
    outgoing_traffic = "‚Üë‚Äî"
    ipv4_address = "‚Äî"
    total_bytes = 0
    formatted_total = "0.00B"

    active_clients = db.get_active_list(server_id=current_server)
    active_info = None
    for ac in active_clients:
        if isinstance(ac, dict) and ac.get('name') == username:
            active_info = ac
            break
        elif isinstance(ac, (list, tuple)) and ac[0] == username:
            active_info = {'name': ac[0], 'last_handshake': ac.get(1, 'never'), 'transfer': ac.get(2, '0/0')}
            break

    if active_info:
        last_handshake_str = active_info.get('last_handshake', 'never')
        if last_handshake_str.lower() not in ['never', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '-']:
            try:
                last_handshake_dt = parse_relative_time(last_handshake_str)
                if last_handshake_dt:
                    delta = datetime.now(pytz.UTC) - last_handshake_dt
                    if delta <= timedelta(minutes=3):
                        status = "üü¢ Online"
                    else:
                        status = "üî¥ Offline"

                transfer = active_info.get('transfer', '0/0')
                incoming_bytes, outgoing_bytes = parse_transfer(transfer)
                incoming_traffic = f"‚Üì{humanize_bytes(incoming_bytes)}"
                outgoing_traffic = f"‚Üë{humanize_bytes(outgoing_bytes)}"
                traffic_data = await update_traffic(username, incoming_bytes, outgoing_bytes)
                total_bytes = traffic_data.get('total_incoming', 0) + traffic_data.get('total_outgoing', 0)
                formatted_total = humanize_bytes(total_bytes)

                if traffic_limit != "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ":
                    limit_bytes = parse_traffic_limit(traffic_limit)
                    if total_bytes >= limit_bytes:
                        await deactivate_user(username)
                        await callback_query.answer(
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                            show_alert=True
                        )
                        return
            except ValueError:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {last_handshake_str}")
                status = "üî¥ Offline"
    else:
        traffic_data = await read_traffic(username)
        total_bytes = traffic_data.get('total_incoming', 0) + traffic_data.get('total_outgoing', 0)
        formatted_total = humanize_bytes(total_bytes)

    allowed_ips = client_info[2]
    ipv4_match = re.search(r'(\d{1,3}\.){3}\d{1,3}/\d+', allowed_ips)
    ipv4_address = ipv4_match.group(0) if ipv4_match else "‚Äî"

    if expiration_time:
        now = datetime.now(pytz.UTC)
        try:
            expiration_dt = expiration_time
            if expiration_dt.tzinfo is None:
                expiration_dt = expiration_dt.replace(tzinfo=pytz.UTC)
            remaining = expiration_dt - now
            if remaining.total_seconds() > 0:
                days, seconds = remaining.days, remaining.seconds
                hours = seconds // 3600
                minutes = (seconds % 3600) // 60
                date_end = f"üìÖ {days}–¥ {hours}—á {minutes}–º"
            else:
                date_end = "üìÖ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: {e}")
            date_end = "üìÖ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
    else:
        date_end = "üìÖ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"

    traffic_limit_display = "‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" if traffic_limit == "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" else traffic_limit

    if last_handshake_str and last_handshake_str.lower() not in ['never', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '-']:
        show_last_handshake = f"{last_handshake_dt.astimezone(CURRENT_TIMEZONE).strftime('%d/%m/%Y %H:%M:%S')}"
    else:
        show_last_handshake = "‚ùó–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö‚ùó"

    username = username.replace('_', ' ')
    text = (
        f"üìß _–ò–º—è:_ {username}\n"
        f"üåê _–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IPv4:_ {ipv4_address}\n"
        f"üåê _–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:_ {status}\n"
        f"‚è≥ _–ü–æ—Å–ª–µ–¥–Ω–µ–µ ü§ù:_ {show_last_handshake}\n"
        f"{date_end}\n"
        f"üîº _–ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:_ {incoming_traffic}\n"
        f"üîΩ _–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:_ {outgoing_traffic}\n"
        f"üìä _–í—Å–µ–≥–æ:_ ‚Üë‚Üì{formatted_total}\n"
        f"             –∏–∑ **{traffic_limit_display}**\n"
    )

    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    if is_admin(callback_query):
        keyboard.add(
            InlineKeyboardButton("üîé IP info", callback_data=f"ip_info_{username}"),
            InlineKeyboardButton("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data=f"connections_{username}"),
            InlineKeyboardButton("üîê –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data=f"send_config_{username}")
        )
        keyboard.add(
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user_{username}")
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        keyboard.add(
            InlineKeyboardButton("üîê –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data=f"send_config_{username}"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user_{username}")
        )
    
    keyboard.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_users"),
        InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home")
    )

    user_id = callback_query.from_user.id
    main_chat_id = user_main_messages.get(user_id, {}).get('chat_id')
    main_message_id = user_main_messages.get(user_id, {}).get('message_id')

    if main_chat_id and main_message_id:
        try:
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text=text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('list_users'))
async def list_users_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    if not current_server:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏'", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_admin(callback_query):
        clients = db.get_client_list(server_id=current_server)
        text_header = f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: *{current_server}*"
    else:
        clients = db.get_clients_by_owner(owner_id=user_id, server_id=current_server)
        text_header = f"–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: *{current_server}*"

    if not clients:
        await callback_query.answer("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—É—Å—Ç.", show_alert=True)
        return

    active_clients = db.get_active_list(server_id=current_server)
    active_clients_dict = {}
    for client in active_clients:
        if isinstance(client, dict):
            username = client.get('name')
            last_handshake = client.get('last_handshake', 'never')
        else:
            username = client[0] if isinstance(client, (list, tuple)) else str(client)
            last_handshake = 'never'
        if username:
            active_clients_dict[username] = last_handshake

    keyboard = InlineKeyboardMarkup(row_width=2)
    now = datetime.now(pytz.UTC)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    expirations = db.load_expirations() if is_admin(callback_query) else {}

    for client in clients:
        username = client[0]
        last_handshake_str = active_clients_dict.get(username)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if last_handshake_str and last_handshake_str.lower() not in ['never', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '-']:
            try:
                last_handshake_dt = parse_relative_time(last_handshake_str)
                if last_handshake_dt:
                    delta = now - last_handshake_dt
                    delta_days = delta.days
                    if delta_days <= 5:
                        status_icon = "üíª"
                    else:
                        status_icon = "‚ùå"
                    status_display = f"{status_icon}({delta_days}d)"
                else:
                    status_display = f"üö´(?d)"
            except ValueError:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {last_handshake_str}")
                status_display = f"üö´(?d)"
        else:
            status_display = f"üö´(?d)"

        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è
        if is_admin(callback_query):
            owner_id = expirations.get(username, {}).get(current_server, {}).get('owner_id')
            if owner_id:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å username)
                    owner_info = f"@{owner_id}" if isinstance(owner_id, str) else f"ID:{owner_id}"
                except:
                    owner_info = f"ID:{owner_id}"
            else:
                owner_info = "Unknown"
            
            button_text = f"{status_display} {username} ({owner_info})"
        else:
            button_text = f"{status_display} {username}"

        keyboard.insert(InlineKeyboardButton(
            button_text,
            callback_data=f"client_{username}"
        ))

    keyboard.add(InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home"))

    main_chat_id = user_main_messages.get(user_id, {}).get('chat_id')
    main_message_id = user_main_messages.get(user_id, {}).get('message_id')

    if main_chat_id and main_message_id:
        try:
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text=text_header,
                reply_markup=keyboard,
                parse_mode='MarkDown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
    else:
        sent_message = await callback_query.message.reply(
            text_header,
            reply_markup=keyboard,
            parse_mode='MarkDown'
        )
        user_main_messages[user_id] = {
            'chat_id': sent_message.chat.id,
            'message_id': sent_message.message_id
        }
        try:
            await bot.pin_chat_message(
                chat_id=sent_message.chat.id,
                message_id=sent_message.message_id,
                disable_notification=True
            )
        except:
            pass

    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('connections_'))
async def client_connections_callback(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
        
    if not current_server:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏'", show_alert=True)
        return
        
    _, username = callback_query.data.split('connections_', 1)
    username = username.strip()
    file_path = os.path.join('files', 'connections', f'{username}_ip.json')
    
    os.makedirs(os.path.join('files', 'connections'), exist_ok=True)
    
    try:
        active_clients = db.get_active_list(server_id=current_server)
        active_info = next((client for client in active_clients if isinstance(client, dict) and client.get('name') == username), None)
        
        if active_info and active_info.get('endpoint'):
            last_handshake_str = active_info.get('last_handshake', 'never')
            if last_handshake_str.lower() not in ['never', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '-']:
                try:
                    last_handshake_dt = parse_relative_time(last_handshake_str)
                    if last_handshake_dt:
                        delta = datetime.now(pytz.UTC) - last_handshake_dt
                        if delta <= timedelta(minutes=1):
                            endpoint = active_info['endpoint'].split(':')[0]
                            current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
                            
                            if os.path.exists(file_path):
                                async with aiofiles.open(file_path, 'r') as f:
                                    data = json.loads(await f.read())
                            else:
                                data = {}

                            if endpoint not in data:
                                data[endpoint] = current_time
                            
                            async with aiofiles.open(file_path, 'w') as f:
                                await f.write(json.dumps(data))
                except ValueError:
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {last_handshake_str}")

        if os.path.exists(file_path):
            async with aiofiles.open(file_path, 'r') as f:
                data = json.loads(await f.read())
            
            sorted_connections = sorted(data.items(), key=lambda x: datetime.strptime(x[1], '%d.%m.%Y %H:%M'), reverse=True)
            
            text = f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n\n"
            for i, (ip, time) in enumerate(sorted_connections, 1):
                connection_time = datetime.strptime(time, '%d.%m.%Y %H:%M')
                isp_info = await get_isp_info(ip)
                if datetime.now() - connection_time <= timedelta(days=1):
                    text += f"{i}. {ip} ({isp_info}) - {connection_time}\n"
        else:
            text = f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_{username}"),
            InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home"))

        await callback_query.message.edit_text(text, reply_markup=keyboard)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö.", show_alert=True) 
        
@dp.callback_query_handler(lambda c: c.data.startswith('ip_info_'))
async def ip_info_callback(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
        
    if not current_server:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏'", show_alert=True)
        return
        
    _, username = callback_query.data.split('ip_info_', 1)
    username = username.strip()
    active_clients = db.get_active_list(server_id=current_server)
    active_info = next((ac for ac in active_clients if ac.get('name') == username), None)
    if active_info:
        endpoint = active_info.get('endpoint', '')
        ip_address = endpoint.split(':')[0] if endpoint else None
    else:
        await callback_query.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return
    url = f"http://ip-api.com/json/{ip_address}?fields=message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,hosting"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if 'message' in data:
                        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {data['message']}", show_alert=True)
                        return
                else:
                    await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {resp.status}", show_alert=True)
                    return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API.", show_alert=True)
        return
    info_text = f"*IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {username}:*\n"
    for key, value in data.items():
        info_text += f"{key.capitalize()}: {value}\n"
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_{username}"),
        InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home")
    )
    main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
    main_message_id = user_main_messages.get(admin, {}).get('message_id')
    if main_chat_id and main_message_id:
        try:
            await bot.edit_message_text(
                chat_id=main_chat_id,
                message_id=main_message_id,
                text=info_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
            return
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_user_'))
async def confirm_delete_user_callback(callback_query: types.CallbackQuery):
    username = callback_query.data.split('confirm_delete_user_')[1]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    if not is_admin(callback_query):
        expirations = db.load_expirations()
        owner_id = expirations.get(username, {}).get(current_server, {}).get('owner_id')
        if owner_id != callback_query.from_user.id:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", show_alert=True)
            return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user_{username}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"list_users")
    )
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *{username}*?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('delete_user_'))
async def client_delete_callback(callback_query: types.CallbackQuery):
    if not current_server:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏'", show_alert=True)
        return
        
    username = callback_query.data.split('delete_user_')[1]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    if not is_admin(callback_query):
        expirations = db.load_expirations()
        owner_id = expirations.get(username, {}).get(current_server, {}).get('owner_id')
        if owner_id != callback_query.from_user.id:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", show_alert=True)
            return
    success = db.deactive_user_db(username, server_id=current_server)
    if success:
        db.remove_user_expiration(username, server_id=current_server)
        try:
            scheduler.remove_job(job_id=username)
        except:
            pass
        user_dir = os.path.join('users', username)
        try:
            if os.path.exists(user_dir):
                shutil.rmtree(user_dir)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            
        connections_file = os.path.join('files', 'connections', f'{username}_ip.json')
        try:
            if os.path.exists(connections_file):
                os.remove(connections_file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        confirmation_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{username}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
    else:
        confirmation_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{username}**."
    main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
    main_message_id = user_main_messages.get(admin, {}).get('message_id')
    if main_chat_id and main_message_id:
        await bot.edit_message_text(
            chat_id=main_chat_id,
            message_id=main_message_id,
            text=confirmation_text,
            parse_mode="Markdown",
            reply_markup=main_menu_markup
        )
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'manage_servers')
async def manage_servers_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    
    servers = db.get_server_list()
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    for server in servers:
        keyboard.insert(InlineKeyboardButton(
            f"{'‚úÖ ' if server == current_server else ''}{server}",
            callback_data=f"select_server_{server}"
        ))
    
    keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="add_server"))
    if servers:
        keyboard.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="delete_server"))
    keyboard.add(InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('select_server_'))
async def select_server_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    
    server_id = callback_query.data.split('select_server_')[1]
    
    if update_server_settings(server_id):
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {server_id}")
        await manage_servers_callback(callback_query)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)

@dp.callback_query_handler(lambda c: c.data in ['auth_password', 'auth_key'])
async def auth_type_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    
    auth_type = callback_query.data.split('_')[1]
    user_main_messages[admin]['auth_type'] = auth_type
    
    if auth_type == 'password':
        user_main_messages[admin]['state'] = 'waiting_for_password'
        user_main_messages[admin]['auth_message_id'] = callback_query.message.message_id
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å SSH:",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="manage_servers")
            )
        )
    else:
        user_main_messages[admin]['state'] = 'waiting_for_key_path'
        user_main_messages[admin]['auth_message_id'] = callback_query.message.message_id
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ SSH-–∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä /home/user/.ssh/id_rsa):",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="manage_servers")
            )
        )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'delete_server')
async def delete_server_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    
    servers = db.get_server_list()
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    for server in servers:
        keyboard.insert(InlineKeyboardButton(
            f"üóë {server}",
            callback_data=f"confirm_delete_server_{server}"
        ))
    
    keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="manage_servers"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n*–í–ù–ò–ú–ê–ù–ò–ï*: –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_server_'))
async def confirm_delete_server_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    
    server_id = callback_query.data.split('confirm_delete_server_')[1]
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_server_confirmed_{server_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_servers")
    )
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä *{server_id}*?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('delete_server_confirmed_'))
async def delete_server_confirmed_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    
    server_id = callback_query.data.split('delete_server_confirmed_')[1]
    
    if server_id == current_server:
        update_server_settings(None)
    
    success = db.remove_server(server_id)
    
    if success:
        await callback_query.answer("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", show_alert=True)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
    
    await manage_servers_callback(callback_query)

@dp.callback_query_handler(lambda c: c.data == 'add_server')
async def add_server_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    
    main_chat_id = user_main_messages.get(admin, {}).get('chat_id')
    main_message_id = user_main_messages.get(admin, {}).get('message_id')
    
    if main_chat_id and main_message_id:
        user_main_messages[admin]['state'] = 'waiting_for_server_id'
        await bot.edit_message_text(
            chat_id=main_chat_id,
            message_id=main_message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="manage_servers")
            )
        )
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('home'))
async def return_home(callback_query: types.CallbackQuery):
    '''if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return'''
    user_id = callback_query.from_user.id
    main_message = user_main_messages.get(user_id)
    if main_message:
        user_main_messages[user_id].pop('state', None)
        user_main_messages[user_id].pop('client_name', None)
        user_main_messages[user_id].pop('duration_choice', None)
        user_main_messages[user_id].pop('traffic_limit', None)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω—é –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        menu_to_show = main_menu_markup if is_admin(callback_query) else user_main_menu_markup
        text_to_show = f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: *{current_server}*" if is_admin(callback_query) else f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: *{current_server}*"

        try:
            await bot.edit_message_text(
                chat_id=main_message['chat_id'],
                message_id=main_message['message_id'],
                text=text_to_show,
                reply_markup=menu_to_show,
                parse_mode='MarkDown'
            )
        except:
            sent_message = await callback_query.message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: *{current_server}*", reply_markup=main_menu_markup)
            user_main_messages[admin] = {'chat_id': sent_message.chat.id, 'message_id': sent_message.message_id}
            try:
                await bot.pin_chat_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id, disable_notification=True)
            except:
                pass
    else:
        sent_message = await callback_query.message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: *{current_server}*", reply_markup=main_menu_markup)
        user_main_messages[admin] = {'chat_id': sent_message.chat.id, 'message_id': sent_message.message_id}
        try:
            await bot.pin_chat_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id, disable_notification=True)
        except:
            pass
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('send_config_'))
async def send_user_config(callback_query: types.CallbackQuery):
    '''if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return'''
        
    user_id = callback_query.from_user.id
    if not current_server:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏'", show_alert=True)
        return
    _, username = callback_query.data.split('send_config_', 1)
    username = username.strip()

    if not is_admin(callback_query):
        expirations = db.load_expirations()
        owner_id = expirations.get(username, {}).get(current_server, {}).get('owner_id')
        if owner_id != user_id:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", show_alert=True)
            return

    sent_messages = []
    try:
        user_dir = os.path.join('users', username)
        conf_path = os.path.join(user_dir, f'{username}.conf')
        if not os.path.exists(conf_path):
            await callback_query.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é, –∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
            return
        if os.path.exists(conf_path):
            vpn_key = await generate_vpn_key(conf_path)
            if vpn_key:
                instruction_text = (
                    "\nAmneziaVPN [Google Play](https://play.google.com/store/apps/details?id=org.amnezia.vpn&hl=ru), "
                    "[GitHub](https://github.com/amnezia-vpn/amnezia-client)"
                )
                formatted_key = format_vpn_key(vpn_key)
                key_message = f"```\n{formatted_key}\n```"
                caption = f"{instruction_text}\n{key_message}"
            else:
                caption = "VPN –∫–ª—é—á –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."
            with open(conf_path, 'rb') as config:
                sent_doc = await bot.send_document(
                    user_id,
                    config,
                    caption=caption,
                    parse_mode="Markdown",
                    disable_notification=True
                )
                sent_messages.append(sent_doc.message_id)
        else:
            confirmation_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{username}**."
            sent_message = await bot.send_message(user_id, confirmation_text, parse_mode="Markdown", disable_notification=True)
            asyncio.create_task(delete_message_after_delay(user_id, sent_message.message_id, delay=15))
            await callback_query.answer()
            return
    except Exception as e:
        confirmation_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        sent_message = await bot.send_message(user_id, confirmation_text, parse_mode="Markdown", disable_notification=True)
        asyncio.create_task(delete_message_after_delay(user_id, sent_message.message_id, delay=15))
        await callback_query.answer()
        return
    if not sent_messages:
        confirmation_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{username}**."
        sent_message = await bot.send_message(user_id, confirmation_text, parse_mode="Markdown", disable_notification=True)
        asyncio.create_task(delete_message_after_delay(user_id, sent_message.message_id, delay=15))
        await callback_query.answer()
        return
    else:
        confirmation_text = f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è **{username}** –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."
        sent_confirmation = await bot.send_message(
            chat_id=user_id,
            text=confirmation_text,
            parse_mode="Markdown",
            disable_notification=True
        )
        asyncio.create_task(delete_message_after_delay(user_id, sent_confirmation.message_id, delay=15))
    for message_id in sent_messages:
        asyncio.create_task(delete_message_after_delay(user_id, message_id, delay=15))
        
    clients = db.get_client_list(server_id=current_server)
    client_info = next((c for c in clients if c[0] == username), None)
    
    if client_info:
        expiration_time = db.get_user_expiration(username, server_id=current_server)
        traffic_limit = db.get_user_traffic_limit(username, server_id=current_server)
        status = "üî¥ Offline"
        incoming_traffic = "‚Üì‚Äî"
        outgoing_traffic = "‚Üë‚Äî"
        ipv4_address = "‚Äî"
        total_bytes = 0
        formatted_total = "0.00B"

        active_clients = db.get_active_list(server_id=current_server)
        active_info = None
        for ac in active_clients:
            if isinstance(ac, dict) and ac.get('name') == username:
                active_info = ac
                break
            elif isinstance(ac, (list, tuple)) and ac[0] == username:
                active_info = {'name': ac[0], 'last_handshake': ac.get(1, 'never'), 'transfer': ac.get(2, '0/0')}
                break

        if active_info:
            last_handshake_str = active_info.get('last_handshake', 'never')
            if last_handshake_str.lower() not in ['never', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '-']:
                try:
                    last_handshake_dt = parse_relative_time(last_handshake_str)
                    if last_handshake_dt:
                        delta = datetime.now(pytz.UTC) - last_handshake_dt
                        if delta <= timedelta(minutes=3):
                            status = "üü¢ Online"
                        else:
                            status = "üî¥ Offline"

                    transfer = active_info.get('transfer', '0/0')
                    incoming_bytes, outgoing_bytes = parse_transfer(transfer)
                    incoming_traffic = f"‚Üì{humanize_bytes(incoming_bytes)}"
                    outgoing_traffic = f"‚Üë{humanize_bytes(outgoing_bytes)}"
                    traffic_data = await update_traffic(username, incoming_bytes, outgoing_bytes)
                    total_bytes = traffic_data.get('total_incoming', 0) + traffic_data.get('total_outgoing', 0)
                    formatted_total = humanize_bytes(total_bytes)
                except ValueError:
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {last_handshake_str}")

        allowed_ips = client_info[2]
        ipv4_match = re.search(r'(\d{1,3}\.){3}\d{1,3}/\d+', allowed_ips)
        ipv4_address = ipv4_match.group(0) if ipv4_match else "‚Äî"

        if expiration_time:
            now = datetime.now(pytz.UTC)
            try:
                expiration_dt = expiration_time
                if expiration_dt.tzinfo is None:
                    expiration_dt = expiration_dt.replace(tzinfo=pytz.UTC)
                remaining = expiration_dt - now
                if remaining.total_seconds() > 0:
                    days, seconds = remaining.days, remaining.seconds
                    hours = seconds // 3600
                    minutes = (seconds % 3600) // 60
                    date_end = f"üìÖ {days}–¥ {hours}—á {minutes}–º"
                else:
                    date_end = "üìÖ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: {e}")
                date_end = "üìÖ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
        else:
            date_end = "üìÖ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"

        traffic_limit_display = "‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" if traffic_limit == "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" else traffic_limit

        if last_handshake_str and last_handshake_str.lower() not in ['never', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '-']:
            show_last_handshake = f"{last_handshake_dt.astimezone(CURRENT_TIMEZONE).strftime('%d/%m/%Y %H:%M:%S')}"
        else:
            show_last_handshake = "‚ùó–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö‚ùó"

        text = (
            f"üìß _–ò–º—è:_ {username}\n"
            f"üåê _–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IPv4:_ {ipv4_address}\n"
            f"üåê _–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:_ {status}\n"
            f"üîº _–ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:_ {incoming_traffic}\n"
            f"{date_end}\n"
            f"üîº _–ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:_ {incoming_traffic}\n"
            f"üîΩ _–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:_ {outgoing_traffic}\n"
            f"üìä _–í—Å–µ–≥–æ:_ ‚Üë‚Üì{formatted_total}\n"
            f"             –∏–∑ **{traffic_limit_display}**\n"
        )

    if client_info:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîé IP info", callback_data=f"ip_info_{username}"),
            InlineKeyboardButton("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data=f"connections_{username}"),
            InlineKeyboardButton("üîê –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data=f"send_config_{username}")
        )
        keyboard.add(
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user_{username}")
        )
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_users"),
            InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home")
        )
        
        try:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except aiogram_exceptions.MessageNotModified:
            pass
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('create_backup'))
async def create_backup_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
        
    if not current_server:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏'", show_alert=True)
        return
    date_str = datetime.now().strftime('%Y-%m-%d')
    backup_filename = f"backup_{date_str}.zip"
    backup_filepath = os.path.join(os.getcwd(), backup_filename)
    try:
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, create_zip, backup_filepath)
        if os.path.exists(backup_filepath):
            with open(backup_filepath, 'rb') as f:
                await bot.send_document(admin, f, caption=backup_filename, disable_notification=True)
            os.remove(backup_filepath)
        else:
            logger.error(f"–ë–µ–∫–∞–ø —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {backup_filepath}")
            await bot.send_message(admin, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø.", disable_notification=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
        await bot.send_message(admin, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø.", disable_notification=True)
    await callback_query.answer()

def parse_transfer(transfer_str):
    try:
        if '/' in transfer_str:
            incoming, outgoing = transfer_str.split('/')
            incoming = incoming.strip()
            outgoing = outgoing.strip()
            incoming_match = re.match(r'([\d.]+)\s*(\w+)', incoming)
            outgoing_match = re.match(r'([\d.]+)\s*(\w+)', outgoing)
            def convert_to_bytes(value, unit):
                size_map = {
                    'B': 1,
                    'KB': 10**3,
                    'KiB': 1024,
                    'MB': 10**6,
                    'MiB': 1024**2,
                    'GB': 10**9,
                    'GiB': 1024**3,
                }
                return float(value) * size_map.get(unit, 1)
            incoming_bytes = convert_to_bytes(*incoming_match.groups()) if incoming_match else 0
            outgoing_bytes = convert_to_bytes(*outgoing_match.groups()) if outgoing_match else 0
            return incoming_bytes, outgoing_bytes
        else:
            parts = re.split(r'[/,]', transfer_str)
            if len(parts) >= 2:
                incoming = parts[0].strip()
                outgoing = parts[1].strip()
                incoming_match = re.match(r'([\d.]+)\s*(\w+)', incoming)
                outgoing_match = re.match(r'([\d.]+)\s*(\w+)', outgoing)
                def convert_to_bytes(value, unit):
                    size_map = {
                        'B': 1,
                        'KB': 10**3,
                        'KiB': 1024,
                        'MB': 10**6,
                        'MiB': 1024**2,
                        'GB': 10**9,
                        'GiB': 1024**3,
                    }
                    return float(value) * size_map.get(unit, 1)
                incoming_bytes = convert_to_bytes(*incoming_match.groups()) if incoming_match else 0
                outgoing_bytes = convert_to_bytes(*outgoing_match.groups()) if outgoing_match else 0
                return incoming_bytes, outgoing_bytes
            else:
                return 0, 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")
        return 0, 0

def humanize_bytes(bytes_value):
    return humanize.naturalsize(bytes_value, binary=False)

async def read_traffic(username, server_id='default'):
    traffic_file = os.path.join('users', username, f'traffic_{server_id}.json')
    os.makedirs(os.path.dirname(traffic_file), exist_ok=True)
    if not os.path.exists(traffic_file):
        traffic_data = {
            "total_incoming": 0,
            "total_outgoing": 0,
            "last_incoming": 0,
            "last_outgoing": 0
        }
        async with aiofiles.open(traffic_file, 'w') as f:
            await f.write(json.dumps(traffic_data))
        return traffic_data
    else:
        async with aiofiles.open(traffic_file, 'r') as f:
            content = await f.read()
            try:
                traffic_data = json.loads(content)
                return traffic_data
            except json.JSONDecodeError:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ traffic.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–Ω–æ–≤–æ.")
                traffic_data = {
                    "total_incoming": 0,
                    "total_outgoing": 0,
                    "last_incoming": 0,
                    "last_outgoing": 0
                }
                async with aiofiles.open(traffic_file, 'w') as f_write:
                    await f_write.write(json.dumps(traffic_data))
                return traffic_data

async def update_traffic(username, incoming_bytes, outgoing_bytes, server_id='default'):
    traffic_data = await read_traffic(username, server_id)
    delta_incoming = incoming_bytes - traffic_data.get('last_incoming', 0)
    delta_outgoing = outgoing_bytes - traffic_data.get('last_outgoing', 0)
    if delta_incoming < 0:
        delta_incoming = 0
    if delta_outgoing < 0:
        delta_outgoing = 0
    traffic_data['total_incoming'] += delta_incoming
    traffic_data['total_outgoing'] += delta_outgoing
    traffic_data['last_incoming'] = incoming_bytes
    traffic_data['last_outgoing'] = outgoing_bytes
    traffic_file = os.path.join('users', username, f'traffic_{server_id}.json')
    async with aiofiles.open(traffic_file, 'w') as f:
        await f.write(json.dumps(traffic_data))
    return traffic_data

async def update_all_clients_traffic():
    if not current_server:
        logger.info("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞")
        return
        
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {current_server}")
    active_clients = db.get_active_list(server_id=current_server)
    for client in active_clients:
        username = client.get('name')
        transfer = client.get('transfer', '0/0')
        incoming_bytes, outgoing_bytes = parse_transfer(transfer)
        traffic_data = await update_traffic(username, incoming_bytes, outgoing_bytes, current_server)
        logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω —Ç—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: –í—Ö–æ–¥—è—â–∏–π {traffic_data['total_incoming']} B, –ò—Å—Ö–æ–¥—è—â–∏–π {traffic_data['total_outgoing']} B")
        traffic_limit = db.get_user_traffic_limit(username, server_id=current_server)
        if traffic_limit != "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ":
            limit_bytes = parse_traffic_limit(traffic_limit)
            total_bytes = traffic_data.get('total_incoming', 0) + traffic_data.get('total_outgoing', 0)
            if total_bytes >= limit_bytes:
                await deactivate_user(username)
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")

async def generate_vpn_key(conf_path: str) -> str:
    try:
        process = await asyncio.create_subprocess_exec(
            'python3.11',
            'awg/awg-decode.py',
            '--encode',
            conf_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()
        if process.returncode != 0:
            logger.error(f"awg-decode.py –æ—à–∏–±–∫–∞: {stderr.decode().strip()}")
            return ""
        vpn_key = stdout.decode().strip()
        if vpn_key.startswith('vpn://'):
            return vpn_key
        else:
            logger.error(f"awg-decode.py –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {vpn_key}")
            return ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ awg-decode.py: {e}")
        return ""

async def deactivate_user(client_name: str):
    success = db.deactive_user_db(client_name, server_id=current_server)
    if success:
        db.remove_user_expiration(client_name)
        try:
            scheduler.remove_job(job_id=client_name)
        except:
            pass
        user_dir = os.path.join('users', client_name)
        try:
            if os.path.exists(user_dir):
                shutil.rmtree(user_dir)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client_name}: {e}")
            
        connections_file = os.path.join('files', 'connections', f'{client_name}_ip.json')
        try:
            if os.path.exists(connections_file):
                os.remove(connections_file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client_name}: {e}")
        confirmation_text = f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{client_name}** –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞."
        sent_message = await bot.send_message(admin, confirmation_text, parse_mode="Markdown", disable_notification=True)
        asyncio.create_task(delete_message_after_delay(admin, sent_message.message_id, delay=15))
    else:
        sent_message = await bot.send_message(admin, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{client_name}**.", parse_mode="Markdown", disable_notification=True)
        asyncio.create_task(delete_message_after_delay(admin, sent_message.message_id, delay=15))

async def check_environment():
    if not current_server:
        logger.error("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return False
        
    servers = db.load_servers()
    if current_server not in servers:
        logger.error(f"–°–µ—Ä–≤–µ—Ä {current_server} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
        
    server_config = servers[current_server]
    try:
        if server_config.get('is_remote') == 'true':
            ssh = db.SSHManager(current_server)
            if not ssh.connect():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                return False
                
            cmd = f"docker ps --filter 'name={DOCKER_CONTAINER}' --format '{{{{.Names}}}}'"
            output, error = ssh.execute_command(cmd)
            if not output or DOCKER_CONTAINER not in output:
                logger.error(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Docker '{DOCKER_CONTAINER}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AmneziaVPN.")
                return False

            cmd = f"docker exec {DOCKER_CONTAINER} test -f {WG_CONFIG_FILE}"
            output, error = ssh.execute_command(cmd)
            if error and 'No such file' in error:
                logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª WireGuard '{WG_CONFIG_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ '{DOCKER_CONTAINER}'.")
                return False
        else:
            cmd = f"docker ps --filter 'name={DOCKER_CONTAINER}' --format '{{{{.Names}}}}'"
            container_names = subprocess.check_output(cmd, shell=True).decode().strip().split('\n')
            if DOCKER_CONTAINER not in container_names:
                logger.error(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Docker '{DOCKER_CONTAINER}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AmneziaVPN.")
                return False

            cmd = f"docker exec {DOCKER_CONTAINER} test -f {WG_CONFIG_FILE}"
            try:
                subprocess.check_call(cmd, shell=True)
            except subprocess.CalledProcessError:
                logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª WireGuard '{WG_CONFIG_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ '{DOCKER_CONTAINER}'.")
                return False

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

async def periodic_ensure_peer_names():
    db.ensure_peer_names(server_id=current_server)

async def on_startup(dp):
    os.makedirs('files/connections', exist_ok=True)
    os.makedirs('users', exist_ok=True)
    await load_isp_cache_task()
    
    global current_server
    if not current_server:
        servers = db.get_server_list()
        if servers:
            current_server = servers[0]
            if update_server_settings(current_server):
                logger.info(f"–í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_server}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_server}")
                await bot.send_message(admin, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏'")
                return
        else:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            await bot.send_message(admin, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞. –î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏'")
            return
    
    environment_ok = await check_environment()
    if not environment_ok:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AmneziaVPN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        await bot.send_message(admin, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AmneziaVPN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        await bot.close()
        sys.exit(1)
    if not scheduler.running:
        scheduler.add_job(update_all_clients_traffic, IntervalTrigger(minutes=1))
        scheduler.add_job(periodic_ensure_peer_names, IntervalTrigger(minutes=1))
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")
    users = db.get_users_with_expiration(server_id=current_server)
    for user in users:
        client_name, expiration_time, traffic_limit = user
        if expiration_time:
            try:
                expiration_datetime = datetime.fromisoformat(expiration_time)
            except ValueError:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client_name}: {expiration_time}")
                continue
            if expiration_datetime.tzinfo is None:
                expiration_datetime = expiration_datetime.replace(tzinfo=pytz.UTC)
            if expiration_datetime > datetime.now(pytz.UTC):
                scheduler.add_job(
                    deactivate_user,
                    trigger=DateTrigger(run_date=expiration_datetime),
                    args=[client_name],
                    id=client_name
                )
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client_name} –Ω–∞ {expiration_datetime}")
            else:
                await deactivate_user(client_name)

async def on_shutdown(dp):
    scheduler.shutdown()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)
